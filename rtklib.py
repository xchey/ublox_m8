# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rtklib', [dirname(__file__)])
        except ImportError:
            import _rtklib
            return _rtklib
        if fp is not None:
            try:
                _mod = imp.load_module('_rtklib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rtklib = swig_import_helper()
    del swig_import_helper
else:
    import _rtklib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


DBL_EPSILON = _rtklib.DBL_EPSILON
PI = _rtklib.PI
D2R = _rtklib.D2R
R2D = _rtklib.R2D
CLIGHT = _rtklib.CLIGHT
SC2RAD = _rtklib.SC2RAD
AU = _rtklib.AU
AS2R = _rtklib.AS2R
MAXFREQ = _rtklib.MAXFREQ
MAXANT = _rtklib.MAXANT
MAXRAWLEN = _rtklib.MAXRAWLEN
MAXLEAPS = _rtklib.MAXLEAPS
FREQ1 = _rtklib.FREQ1
FREQ2 = _rtklib.FREQ2
FREQ5 = _rtklib.FREQ5
FREQ6 = _rtklib.FREQ6
FREQ7 = _rtklib.FREQ7
FREQ8 = _rtklib.FREQ8
FREQ9 = _rtklib.FREQ9
FREQ1_GLO = _rtklib.FREQ1_GLO
DFRQ1_GLO = _rtklib.DFRQ1_GLO
FREQ2_GLO = _rtklib.FREQ2_GLO
DFRQ2_GLO = _rtklib.DFRQ2_GLO
FREQ3_GLO = _rtklib.FREQ3_GLO
FREQ1_CMP = _rtklib.FREQ1_CMP
FREQ2_CMP = _rtklib.FREQ2_CMP
FREQ3_CMP = _rtklib.FREQ3_CMP
SYS_NONE = _rtklib.SYS_NONE
SYS_GPS = _rtklib.SYS_GPS
SYS_SBS = _rtklib.SYS_SBS
SYS_GLO = _rtklib.SYS_GLO
SYS_GAL = _rtklib.SYS_GAL
SYS_QZS = _rtklib.SYS_QZS
SYS_CMP = _rtklib.SYS_CMP
SYS_IRN = _rtklib.SYS_IRN
SYS_LEO = _rtklib.SYS_LEO
SYS_ALL = _rtklib.SYS_ALL
TSYS_GPS = _rtklib.TSYS_GPS
TSYS_UTC = _rtklib.TSYS_UTC
TSYS_GLO = _rtklib.TSYS_GLO
TSYS_GAL = _rtklib.TSYS_GAL
TSYS_QZS = _rtklib.TSYS_QZS
TSYS_CMP = _rtklib.TSYS_CMP
TSYS_IRN = _rtklib.TSYS_IRN
STRFMT_RTCM3 = _rtklib.STRFMT_RTCM3
STRFMT_UBX = _rtklib.STRFMT_UBX
ENAGLO = _rtklib.ENAGLO
ENACMP = _rtklib.ENACMP
ENAGAL = _rtklib.ENAGAL
NFREQ = _rtklib.NFREQ
NFREQGLO = _rtklib.NFREQGLO
NEXOBS = _rtklib.NEXOBS
MINPRNGPS = _rtklib.MINPRNGPS
MAXPRNGPS = _rtklib.MAXPRNGPS
NSATGPS = _rtklib.NSATGPS
NSYSGPS = _rtklib.NSYSGPS
MINPRNGLO = _rtklib.MINPRNGLO
MAXPRNGLO = _rtklib.MAXPRNGLO
NSATGLO = _rtklib.NSATGLO
NSYSGLO = _rtklib.NSYSGLO
MINPRNGAL = _rtklib.MINPRNGAL
MAXPRNGAL = _rtklib.MAXPRNGAL
NSATGAL = _rtklib.NSATGAL
NSYSGAL = _rtklib.NSYSGAL
MINPRNQZS = _rtklib.MINPRNQZS
MAXPRNQZS = _rtklib.MAXPRNQZS
MINPRNQZS_S = _rtklib.MINPRNQZS_S
MAXPRNQZS_S = _rtklib.MAXPRNQZS_S
NSATQZS = _rtklib.NSATQZS
NSYSQZS = _rtklib.NSYSQZS
MINPRNCMP = _rtklib.MINPRNCMP
MAXPRNCMP = _rtklib.MAXPRNCMP
NSATCMP = _rtklib.NSATCMP
NSYSCMP = _rtklib.NSYSCMP
MINPRNIRN = _rtklib.MINPRNIRN
MAXPRNIRN = _rtklib.MAXPRNIRN
NSATIRN = _rtklib.NSATIRN
NSYSIRN = _rtklib.NSYSIRN
MINPRNLEO = _rtklib.MINPRNLEO
MAXPRNLEO = _rtklib.MAXPRNLEO
NSATLEO = _rtklib.NSATLEO
NSYSLEO = _rtklib.NSYSLEO
NSYS = _rtklib.NSYS
MINPRNSBS = _rtklib.MINPRNSBS
MAXPRNSBS = _rtklib.MAXPRNSBS
NSATSBS = _rtklib.NSATSBS
MAXSAT = _rtklib.MAXSAT
MAXSTA = _rtklib.MAXSTA
MINGPSPRN = _rtklib.MINGPSPRN
MAXGPSPRN = _rtklib.MAXGPSPRN
MINGLOPRN = _rtklib.MINGLOPRN
MAXGLOPRN = _rtklib.MAXGLOPRN
MINGALPRN = _rtklib.MINGALPRN
MAXGALPRN = _rtklib.MAXGALPRN
MINBDSPRN = _rtklib.MINBDSPRN
MAXBDSPRN = _rtklib.MAXBDSPRN
MAXOBS = _rtklib.MAXOBS
MAXRCV = _rtklib.MAXRCV
MAXOBSTYPE = _rtklib.MAXOBSTYPE
DTTOL = _rtklib.DTTOL
MAXDTOE = _rtklib.MAXDTOE
MAXDTOE_GAL = _rtklib.MAXDTOE_GAL
MAXDTOE_CMP = _rtklib.MAXDTOE_CMP
MAXDTOE_GLO = _rtklib.MAXDTOE_GLO
MAXDTOE_S = _rtklib.MAXDTOE_S
MAXGDOP = _rtklib.MAXGDOP
OBSTYPE_PR = _rtklib.OBSTYPE_PR
OBSTYPE_CP = _rtklib.OBSTYPE_CP
OBSTYPE_DOP = _rtklib.OBSTYPE_DOP
OBSTYPE_SNR = _rtklib.OBSTYPE_SNR
OBSTYPE_ALL = _rtklib.OBSTYPE_ALL
FREQTYPE_L1 = _rtklib.FREQTYPE_L1
FREQTYPE_L2 = _rtklib.FREQTYPE_L2
FREQTYPE_L5 = _rtklib.FREQTYPE_L5
FREQTYPE_L6 = _rtklib.FREQTYPE_L6
FREQTYPE_L7 = _rtklib.FREQTYPE_L7
FREQTYPE_L8 = _rtklib.FREQTYPE_L8
FREQTYPE_L9 = _rtklib.FREQTYPE_L9
FREQTYPE_ALL = _rtklib.FREQTYPE_ALL
CODE_NONE = _rtklib.CODE_NONE
CODE_L1C = _rtklib.CODE_L1C
CODE_L1P = _rtklib.CODE_L1P
CODE_L1W = _rtklib.CODE_L1W
CODE_L1Y = _rtklib.CODE_L1Y
CODE_L1M = _rtklib.CODE_L1M
CODE_L1N = _rtklib.CODE_L1N
CODE_L1S = _rtklib.CODE_L1S
CODE_L1L = _rtklib.CODE_L1L
CODE_L1E = _rtklib.CODE_L1E
CODE_L1A = _rtklib.CODE_L1A
CODE_L1B = _rtklib.CODE_L1B
CODE_L1X = _rtklib.CODE_L1X
CODE_L1Z = _rtklib.CODE_L1Z
CODE_L2C = _rtklib.CODE_L2C
CODE_L2D = _rtklib.CODE_L2D
CODE_L2S = _rtklib.CODE_L2S
CODE_L2L = _rtklib.CODE_L2L
CODE_L2X = _rtklib.CODE_L2X
CODE_L2P = _rtklib.CODE_L2P
CODE_L2W = _rtklib.CODE_L2W
CODE_L2Y = _rtklib.CODE_L2Y
CODE_L2M = _rtklib.CODE_L2M
CODE_L2N = _rtklib.CODE_L2N
CODE_L5I = _rtklib.CODE_L5I
CODE_L5Q = _rtklib.CODE_L5Q
CODE_L5X = _rtklib.CODE_L5X
CODE_L7I = _rtklib.CODE_L7I
CODE_L7Q = _rtklib.CODE_L7Q
CODE_L7X = _rtklib.CODE_L7X
CODE_L6A = _rtklib.CODE_L6A
CODE_L6B = _rtklib.CODE_L6B
CODE_L6C = _rtklib.CODE_L6C
CODE_L6X = _rtklib.CODE_L6X
CODE_L6Z = _rtklib.CODE_L6Z
CODE_L6S = _rtklib.CODE_L6S
CODE_L6L = _rtklib.CODE_L6L
CODE_L8I = _rtklib.CODE_L8I
CODE_L8Q = _rtklib.CODE_L8Q
CODE_L8X = _rtklib.CODE_L8X
CODE_L2I = _rtklib.CODE_L2I
CODE_L2Q = _rtklib.CODE_L2Q
CODE_L6I = _rtklib.CODE_L6I
CODE_L6Q = _rtklib.CODE_L6Q
CODE_L3I = _rtklib.CODE_L3I
CODE_L3Q = _rtklib.CODE_L3Q
CODE_L3X = _rtklib.CODE_L3X
CODE_L1I = _rtklib.CODE_L1I
CODE_L1Q = _rtklib.CODE_L1Q
CODE_L5A = _rtklib.CODE_L5A
CODE_L5B = _rtklib.CODE_L5B
CODE_L5C = _rtklib.CODE_L5C
CODE_L9A = _rtklib.CODE_L9A
CODE_L9B = _rtklib.CODE_L9B
CODE_L9C = _rtklib.CODE_L9C
CODE_L9X = _rtklib.CODE_L9X
MAXCODE = _rtklib.MAXCODE
TIMES_GPST = _rtklib.TIMES_GPST
TIMES_UTC = _rtklib.TIMES_UTC
TIMES_JST = _rtklib.TIMES_JST
MAXRCVFMT = _rtklib.MAXRCVFMT
LLI_SLIP = _rtklib.LLI_SLIP
LLI_HALFC = _rtklib.LLI_HALFC
LLI_BOCTRK = _rtklib.LLI_BOCTRK
LLI_HALFA = _rtklib.LLI_HALFA
LLI_HALFS = _rtklib.LLI_HALFS
P2_5 = _rtklib.P2_5
P2_6 = _rtklib.P2_6
P2_11 = _rtklib.P2_11
P2_15 = _rtklib.P2_15
P2_17 = _rtklib.P2_17
P2_19 = _rtklib.P2_19
P2_20 = _rtklib.P2_20
P2_21 = _rtklib.P2_21
P2_23 = _rtklib.P2_23
P2_24 = _rtklib.P2_24
P2_27 = _rtklib.P2_27
P2_29 = _rtklib.P2_29
P2_30 = _rtklib.P2_30
P2_31 = _rtklib.P2_31
P2_32 = _rtklib.P2_32
P2_33 = _rtklib.P2_33
P2_35 = _rtklib.P2_35
P2_38 = _rtklib.P2_38
P2_39 = _rtklib.P2_39
P2_40 = _rtklib.P2_40
P2_43 = _rtklib.P2_43
P2_48 = _rtklib.P2_48
P2_50 = _rtklib.P2_50
P2_55 = _rtklib.P2_55
P2P_11 = _rtklib.P2P_11
P2P_12 = _rtklib.P2P_12
P2P_14 = _rtklib.P2P_14
P2P_16 = _rtklib.P2P_16
P2_10 = _rtklib.P2_10
P2_34 = _rtklib.P2_34
P2_46 = _rtklib.P2_46
P2_59 = _rtklib.P2_59
P2_66 = _rtklib.P2_66
UBX_MASK = _rtklib.UBX_MASK
ID_POSECEF = _rtklib.ID_POSECEF
ID_HPPOSECEF = _rtklib.ID_HPPOSECEF
ID_VELECEF = _rtklib.ID_VELECEF
ID_NAVSOL = _rtklib.ID_NAVSOL
ID_NAVPVT = _rtklib.ID_NAVPVT
ID_NAVTIME = _rtklib.ID_NAVTIME
ID_RXMRAW = _rtklib.ID_RXMRAW
ID_RXMSFRB = _rtklib.ID_RXMSFRB
ID_RXMSFRBX = _rtklib.ID_RXMSFRBX
ID_RXMRAWX = _rtklib.ID_RXMRAWX
ID_TRKD5 = _rtklib.ID_TRKD5
ID_TRKMEAS = _rtklib.ID_TRKMEAS
ID_TRKSFRBX = _rtklib.ID_TRKSFRBX
ID_MONHW = _rtklib.ID_MONHW
class gtime_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gtime_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gtime_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _rtklib.gtime_t_time_set
    __swig_getmethods__["time"] = _rtklib.gtime_t_time_get
    if _newclass:time = _swig_property(_rtklib.gtime_t_time_get, _rtklib.gtime_t_time_set)
    __swig_setmethods__["sec"] = _rtklib.gtime_t_sec_set
    __swig_getmethods__["sec"] = _rtklib.gtime_t_sec_get
    if _newclass:sec = _swig_property(_rtklib.gtime_t_sec_get, _rtklib.gtime_t_sec_set)
    def __init__(self): 
        this = _rtklib.new_gtime_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_gtime_t
    __del__ = lambda self : None;
gtime_t_swigregister = _rtklib.gtime_t_swigregister
gtime_t_swigregister(gtime_t)
cvar = _rtklib.cvar
slot_freq = cvar.slot_freq

class obsd_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, obsd_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, obsd_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _rtklib.obsd_t_time_set
    __swig_getmethods__["time"] = _rtklib.obsd_t_time_get
    if _newclass:time = _swig_property(_rtklib.obsd_t_time_get, _rtklib.obsd_t_time_set)
    __swig_setmethods__["sat"] = _rtklib.obsd_t_sat_set
    __swig_getmethods__["sat"] = _rtklib.obsd_t_sat_get
    if _newclass:sat = _swig_property(_rtklib.obsd_t_sat_get, _rtklib.obsd_t_sat_set)
    __swig_setmethods__["rcv"] = _rtklib.obsd_t_rcv_set
    __swig_getmethods__["rcv"] = _rtklib.obsd_t_rcv_get
    if _newclass:rcv = _swig_property(_rtklib.obsd_t_rcv_get, _rtklib.obsd_t_rcv_set)
    __swig_setmethods__["SNR"] = _rtklib.obsd_t_SNR_set
    __swig_getmethods__["SNR"] = _rtklib.obsd_t_SNR_get
    if _newclass:SNR = _swig_property(_rtklib.obsd_t_SNR_get, _rtklib.obsd_t_SNR_set)
    __swig_setmethods__["LLI"] = _rtklib.obsd_t_LLI_set
    __swig_getmethods__["LLI"] = _rtklib.obsd_t_LLI_get
    if _newclass:LLI = _swig_property(_rtklib.obsd_t_LLI_get, _rtklib.obsd_t_LLI_set)
    __swig_setmethods__["code"] = _rtklib.obsd_t_code_set
    __swig_getmethods__["code"] = _rtklib.obsd_t_code_get
    if _newclass:code = _swig_property(_rtklib.obsd_t_code_get, _rtklib.obsd_t_code_set)
    __swig_setmethods__["L"] = _rtklib.obsd_t_L_set
    __swig_getmethods__["L"] = _rtklib.obsd_t_L_get
    if _newclass:L = _swig_property(_rtklib.obsd_t_L_get, _rtklib.obsd_t_L_set)
    __swig_setmethods__["P"] = _rtklib.obsd_t_P_set
    __swig_getmethods__["P"] = _rtklib.obsd_t_P_get
    if _newclass:P = _swig_property(_rtklib.obsd_t_P_get, _rtklib.obsd_t_P_set)
    __swig_setmethods__["D"] = _rtklib.obsd_t_D_set
    __swig_getmethods__["D"] = _rtklib.obsd_t_D_get
    if _newclass:D = _swig_property(_rtklib.obsd_t_D_get, _rtklib.obsd_t_D_set)
    def __init__(self): 
        this = _rtklib.new_obsd_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_obsd_t
    __del__ = lambda self : None;
obsd_t_swigregister = _rtklib.obsd_t_swigregister
obsd_t_swigregister(obsd_t)

class obs_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, obs_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, obs_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _rtklib.obs_t_n_set
    __swig_getmethods__["n"] = _rtklib.obs_t_n_get
    if _newclass:n = _swig_property(_rtklib.obs_t_n_get, _rtklib.obs_t_n_set)
    __swig_setmethods__["nmax"] = _rtklib.obs_t_nmax_set
    __swig_getmethods__["nmax"] = _rtklib.obs_t_nmax_get
    if _newclass:nmax = _swig_property(_rtklib.obs_t_nmax_get, _rtklib.obs_t_nmax_set)
    __swig_setmethods__["data"] = _rtklib.obs_t_data_set
    __swig_getmethods__["data"] = _rtklib.obs_t_data_get
    if _newclass:data = _swig_property(_rtklib.obs_t_data_get, _rtklib.obs_t_data_set)
    def __init__(self): 
        this = _rtklib.new_obs_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_obs_t
    __del__ = lambda self : None;
obs_t_swigregister = _rtklib.obs_t_swigregister
obs_t_swigregister(obs_t)

class alm_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, alm_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, alm_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sat"] = _rtklib.alm_t_sat_set
    __swig_getmethods__["sat"] = _rtklib.alm_t_sat_get
    if _newclass:sat = _swig_property(_rtklib.alm_t_sat_get, _rtklib.alm_t_sat_set)
    __swig_setmethods__["svh"] = _rtklib.alm_t_svh_set
    __swig_getmethods__["svh"] = _rtklib.alm_t_svh_get
    if _newclass:svh = _swig_property(_rtklib.alm_t_svh_get, _rtklib.alm_t_svh_set)
    __swig_setmethods__["svconf"] = _rtklib.alm_t_svconf_set
    __swig_getmethods__["svconf"] = _rtklib.alm_t_svconf_get
    if _newclass:svconf = _swig_property(_rtklib.alm_t_svconf_get, _rtklib.alm_t_svconf_set)
    __swig_setmethods__["week"] = _rtklib.alm_t_week_set
    __swig_getmethods__["week"] = _rtklib.alm_t_week_get
    if _newclass:week = _swig_property(_rtklib.alm_t_week_get, _rtklib.alm_t_week_set)
    __swig_setmethods__["toa"] = _rtklib.alm_t_toa_set
    __swig_getmethods__["toa"] = _rtklib.alm_t_toa_get
    if _newclass:toa = _swig_property(_rtklib.alm_t_toa_get, _rtklib.alm_t_toa_set)
    __swig_setmethods__["A"] = _rtklib.alm_t_A_set
    __swig_getmethods__["A"] = _rtklib.alm_t_A_get
    if _newclass:A = _swig_property(_rtklib.alm_t_A_get, _rtklib.alm_t_A_set)
    __swig_setmethods__["e"] = _rtklib.alm_t_e_set
    __swig_getmethods__["e"] = _rtklib.alm_t_e_get
    if _newclass:e = _swig_property(_rtklib.alm_t_e_get, _rtklib.alm_t_e_set)
    __swig_setmethods__["i0"] = _rtklib.alm_t_i0_set
    __swig_getmethods__["i0"] = _rtklib.alm_t_i0_get
    if _newclass:i0 = _swig_property(_rtklib.alm_t_i0_get, _rtklib.alm_t_i0_set)
    __swig_setmethods__["OMG0"] = _rtklib.alm_t_OMG0_set
    __swig_getmethods__["OMG0"] = _rtklib.alm_t_OMG0_get
    if _newclass:OMG0 = _swig_property(_rtklib.alm_t_OMG0_get, _rtklib.alm_t_OMG0_set)
    __swig_setmethods__["omg"] = _rtklib.alm_t_omg_set
    __swig_getmethods__["omg"] = _rtklib.alm_t_omg_get
    if _newclass:omg = _swig_property(_rtklib.alm_t_omg_get, _rtklib.alm_t_omg_set)
    __swig_setmethods__["M0"] = _rtklib.alm_t_M0_set
    __swig_getmethods__["M0"] = _rtklib.alm_t_M0_get
    if _newclass:M0 = _swig_property(_rtklib.alm_t_M0_get, _rtklib.alm_t_M0_set)
    __swig_setmethods__["OMGd"] = _rtklib.alm_t_OMGd_set
    __swig_getmethods__["OMGd"] = _rtklib.alm_t_OMGd_get
    if _newclass:OMGd = _swig_property(_rtklib.alm_t_OMGd_get, _rtklib.alm_t_OMGd_set)
    __swig_setmethods__["toas"] = _rtklib.alm_t_toas_set
    __swig_getmethods__["toas"] = _rtklib.alm_t_toas_get
    if _newclass:toas = _swig_property(_rtklib.alm_t_toas_get, _rtklib.alm_t_toas_set)
    __swig_setmethods__["f0"] = _rtklib.alm_t_f0_set
    __swig_getmethods__["f0"] = _rtklib.alm_t_f0_get
    if _newclass:f0 = _swig_property(_rtklib.alm_t_f0_get, _rtklib.alm_t_f0_set)
    __swig_setmethods__["f1"] = _rtklib.alm_t_f1_set
    __swig_getmethods__["f1"] = _rtklib.alm_t_f1_get
    if _newclass:f1 = _swig_property(_rtklib.alm_t_f1_get, _rtklib.alm_t_f1_set)
    def __init__(self): 
        this = _rtklib.new_alm_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_alm_t
    __del__ = lambda self : None;
alm_t_swigregister = _rtklib.alm_t_swigregister
alm_t_swigregister(alm_t)

class eph_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, eph_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, eph_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sat"] = _rtklib.eph_t_sat_set
    __swig_getmethods__["sat"] = _rtklib.eph_t_sat_get
    if _newclass:sat = _swig_property(_rtklib.eph_t_sat_get, _rtklib.eph_t_sat_set)
    __swig_setmethods__["iode"] = _rtklib.eph_t_iode_set
    __swig_getmethods__["iode"] = _rtklib.eph_t_iode_get
    if _newclass:iode = _swig_property(_rtklib.eph_t_iode_get, _rtklib.eph_t_iode_set)
    __swig_setmethods__["iodc"] = _rtklib.eph_t_iodc_set
    __swig_getmethods__["iodc"] = _rtklib.eph_t_iodc_get
    if _newclass:iodc = _swig_property(_rtklib.eph_t_iodc_get, _rtklib.eph_t_iodc_set)
    __swig_setmethods__["sva"] = _rtklib.eph_t_sva_set
    __swig_getmethods__["sva"] = _rtklib.eph_t_sva_get
    if _newclass:sva = _swig_property(_rtklib.eph_t_sva_get, _rtklib.eph_t_sva_set)
    __swig_setmethods__["svh"] = _rtklib.eph_t_svh_set
    __swig_getmethods__["svh"] = _rtklib.eph_t_svh_get
    if _newclass:svh = _swig_property(_rtklib.eph_t_svh_get, _rtklib.eph_t_svh_set)
    __swig_setmethods__["week"] = _rtklib.eph_t_week_set
    __swig_getmethods__["week"] = _rtklib.eph_t_week_get
    if _newclass:week = _swig_property(_rtklib.eph_t_week_get, _rtklib.eph_t_week_set)
    __swig_setmethods__["code"] = _rtklib.eph_t_code_set
    __swig_getmethods__["code"] = _rtklib.eph_t_code_get
    if _newclass:code = _swig_property(_rtklib.eph_t_code_get, _rtklib.eph_t_code_set)
    __swig_setmethods__["flag"] = _rtklib.eph_t_flag_set
    __swig_getmethods__["flag"] = _rtklib.eph_t_flag_get
    if _newclass:flag = _swig_property(_rtklib.eph_t_flag_get, _rtklib.eph_t_flag_set)
    __swig_setmethods__["toe"] = _rtklib.eph_t_toe_set
    __swig_getmethods__["toe"] = _rtklib.eph_t_toe_get
    if _newclass:toe = _swig_property(_rtklib.eph_t_toe_get, _rtklib.eph_t_toe_set)
    __swig_setmethods__["toc"] = _rtklib.eph_t_toc_set
    __swig_getmethods__["toc"] = _rtklib.eph_t_toc_get
    if _newclass:toc = _swig_property(_rtklib.eph_t_toc_get, _rtklib.eph_t_toc_set)
    __swig_setmethods__["ttr"] = _rtklib.eph_t_ttr_set
    __swig_getmethods__["ttr"] = _rtklib.eph_t_ttr_get
    if _newclass:ttr = _swig_property(_rtklib.eph_t_ttr_get, _rtklib.eph_t_ttr_set)
    __swig_setmethods__["A"] = _rtklib.eph_t_A_set
    __swig_getmethods__["A"] = _rtklib.eph_t_A_get
    if _newclass:A = _swig_property(_rtklib.eph_t_A_get, _rtklib.eph_t_A_set)
    __swig_setmethods__["e"] = _rtklib.eph_t_e_set
    __swig_getmethods__["e"] = _rtklib.eph_t_e_get
    if _newclass:e = _swig_property(_rtklib.eph_t_e_get, _rtklib.eph_t_e_set)
    __swig_setmethods__["i0"] = _rtklib.eph_t_i0_set
    __swig_getmethods__["i0"] = _rtklib.eph_t_i0_get
    if _newclass:i0 = _swig_property(_rtklib.eph_t_i0_get, _rtklib.eph_t_i0_set)
    __swig_setmethods__["OMG0"] = _rtklib.eph_t_OMG0_set
    __swig_getmethods__["OMG0"] = _rtklib.eph_t_OMG0_get
    if _newclass:OMG0 = _swig_property(_rtklib.eph_t_OMG0_get, _rtklib.eph_t_OMG0_set)
    __swig_setmethods__["omg"] = _rtklib.eph_t_omg_set
    __swig_getmethods__["omg"] = _rtklib.eph_t_omg_get
    if _newclass:omg = _swig_property(_rtklib.eph_t_omg_get, _rtklib.eph_t_omg_set)
    __swig_setmethods__["M0"] = _rtklib.eph_t_M0_set
    __swig_getmethods__["M0"] = _rtklib.eph_t_M0_get
    if _newclass:M0 = _swig_property(_rtklib.eph_t_M0_get, _rtklib.eph_t_M0_set)
    __swig_setmethods__["deln"] = _rtklib.eph_t_deln_set
    __swig_getmethods__["deln"] = _rtklib.eph_t_deln_get
    if _newclass:deln = _swig_property(_rtklib.eph_t_deln_get, _rtklib.eph_t_deln_set)
    __swig_setmethods__["OMGd"] = _rtklib.eph_t_OMGd_set
    __swig_getmethods__["OMGd"] = _rtklib.eph_t_OMGd_get
    if _newclass:OMGd = _swig_property(_rtklib.eph_t_OMGd_get, _rtklib.eph_t_OMGd_set)
    __swig_setmethods__["idot"] = _rtklib.eph_t_idot_set
    __swig_getmethods__["idot"] = _rtklib.eph_t_idot_get
    if _newclass:idot = _swig_property(_rtklib.eph_t_idot_get, _rtklib.eph_t_idot_set)
    __swig_setmethods__["crc"] = _rtklib.eph_t_crc_set
    __swig_getmethods__["crc"] = _rtklib.eph_t_crc_get
    if _newclass:crc = _swig_property(_rtklib.eph_t_crc_get, _rtklib.eph_t_crc_set)
    __swig_setmethods__["crs"] = _rtklib.eph_t_crs_set
    __swig_getmethods__["crs"] = _rtklib.eph_t_crs_get
    if _newclass:crs = _swig_property(_rtklib.eph_t_crs_get, _rtklib.eph_t_crs_set)
    __swig_setmethods__["cuc"] = _rtklib.eph_t_cuc_set
    __swig_getmethods__["cuc"] = _rtklib.eph_t_cuc_get
    if _newclass:cuc = _swig_property(_rtklib.eph_t_cuc_get, _rtklib.eph_t_cuc_set)
    __swig_setmethods__["cus"] = _rtklib.eph_t_cus_set
    __swig_getmethods__["cus"] = _rtklib.eph_t_cus_get
    if _newclass:cus = _swig_property(_rtklib.eph_t_cus_get, _rtklib.eph_t_cus_set)
    __swig_setmethods__["cic"] = _rtklib.eph_t_cic_set
    __swig_getmethods__["cic"] = _rtklib.eph_t_cic_get
    if _newclass:cic = _swig_property(_rtklib.eph_t_cic_get, _rtklib.eph_t_cic_set)
    __swig_setmethods__["cis"] = _rtklib.eph_t_cis_set
    __swig_getmethods__["cis"] = _rtklib.eph_t_cis_get
    if _newclass:cis = _swig_property(_rtklib.eph_t_cis_get, _rtklib.eph_t_cis_set)
    __swig_setmethods__["toes"] = _rtklib.eph_t_toes_set
    __swig_getmethods__["toes"] = _rtklib.eph_t_toes_get
    if _newclass:toes = _swig_property(_rtklib.eph_t_toes_get, _rtklib.eph_t_toes_set)
    __swig_setmethods__["fit"] = _rtklib.eph_t_fit_set
    __swig_getmethods__["fit"] = _rtklib.eph_t_fit_get
    if _newclass:fit = _swig_property(_rtklib.eph_t_fit_get, _rtklib.eph_t_fit_set)
    __swig_setmethods__["f0"] = _rtklib.eph_t_f0_set
    __swig_getmethods__["f0"] = _rtklib.eph_t_f0_get
    if _newclass:f0 = _swig_property(_rtklib.eph_t_f0_get, _rtklib.eph_t_f0_set)
    __swig_setmethods__["f1"] = _rtklib.eph_t_f1_set
    __swig_getmethods__["f1"] = _rtklib.eph_t_f1_get
    if _newclass:f1 = _swig_property(_rtklib.eph_t_f1_get, _rtklib.eph_t_f1_set)
    __swig_setmethods__["f2"] = _rtklib.eph_t_f2_set
    __swig_getmethods__["f2"] = _rtklib.eph_t_f2_get
    if _newclass:f2 = _swig_property(_rtklib.eph_t_f2_get, _rtklib.eph_t_f2_set)
    __swig_setmethods__["tgd"] = _rtklib.eph_t_tgd_set
    __swig_getmethods__["tgd"] = _rtklib.eph_t_tgd_get
    if _newclass:tgd = _swig_property(_rtklib.eph_t_tgd_get, _rtklib.eph_t_tgd_set)
    __swig_setmethods__["Adot"] = _rtklib.eph_t_Adot_set
    __swig_getmethods__["Adot"] = _rtklib.eph_t_Adot_get
    if _newclass:Adot = _swig_property(_rtklib.eph_t_Adot_get, _rtklib.eph_t_Adot_set)
    __swig_setmethods__["ndot"] = _rtklib.eph_t_ndot_set
    __swig_getmethods__["ndot"] = _rtklib.eph_t_ndot_get
    if _newclass:ndot = _swig_property(_rtklib.eph_t_ndot_get, _rtklib.eph_t_ndot_set)
    def __init__(self): 
        this = _rtklib.new_eph_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_eph_t
    __del__ = lambda self : None;
eph_t_swigregister = _rtklib.eph_t_swigregister
eph_t_swigregister(eph_t)

class geph_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, geph_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, geph_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sat"] = _rtklib.geph_t_sat_set
    __swig_getmethods__["sat"] = _rtklib.geph_t_sat_get
    if _newclass:sat = _swig_property(_rtklib.geph_t_sat_get, _rtklib.geph_t_sat_set)
    __swig_setmethods__["iode"] = _rtklib.geph_t_iode_set
    __swig_getmethods__["iode"] = _rtklib.geph_t_iode_get
    if _newclass:iode = _swig_property(_rtklib.geph_t_iode_get, _rtklib.geph_t_iode_set)
    __swig_setmethods__["frq"] = _rtklib.geph_t_frq_set
    __swig_getmethods__["frq"] = _rtklib.geph_t_frq_get
    if _newclass:frq = _swig_property(_rtklib.geph_t_frq_get, _rtklib.geph_t_frq_set)
    __swig_setmethods__["svh"] = _rtklib.geph_t_svh_set
    __swig_getmethods__["svh"] = _rtklib.geph_t_svh_get
    if _newclass:svh = _swig_property(_rtklib.geph_t_svh_get, _rtklib.geph_t_svh_set)
    __swig_setmethods__["sva"] = _rtklib.geph_t_sva_set
    __swig_getmethods__["sva"] = _rtklib.geph_t_sva_get
    if _newclass:sva = _swig_property(_rtklib.geph_t_sva_get, _rtklib.geph_t_sva_set)
    __swig_setmethods__["age"] = _rtklib.geph_t_age_set
    __swig_getmethods__["age"] = _rtklib.geph_t_age_get
    if _newclass:age = _swig_property(_rtklib.geph_t_age_get, _rtklib.geph_t_age_set)
    __swig_setmethods__["toe"] = _rtklib.geph_t_toe_set
    __swig_getmethods__["toe"] = _rtklib.geph_t_toe_get
    if _newclass:toe = _swig_property(_rtklib.geph_t_toe_get, _rtklib.geph_t_toe_set)
    __swig_setmethods__["tof"] = _rtklib.geph_t_tof_set
    __swig_getmethods__["tof"] = _rtklib.geph_t_tof_get
    if _newclass:tof = _swig_property(_rtklib.geph_t_tof_get, _rtklib.geph_t_tof_set)
    __swig_setmethods__["pos"] = _rtklib.geph_t_pos_set
    __swig_getmethods__["pos"] = _rtklib.geph_t_pos_get
    if _newclass:pos = _swig_property(_rtklib.geph_t_pos_get, _rtklib.geph_t_pos_set)
    __swig_setmethods__["vel"] = _rtklib.geph_t_vel_set
    __swig_getmethods__["vel"] = _rtklib.geph_t_vel_get
    if _newclass:vel = _swig_property(_rtklib.geph_t_vel_get, _rtklib.geph_t_vel_set)
    __swig_setmethods__["acc"] = _rtklib.geph_t_acc_set
    __swig_getmethods__["acc"] = _rtklib.geph_t_acc_get
    if _newclass:acc = _swig_property(_rtklib.geph_t_acc_get, _rtklib.geph_t_acc_set)
    __swig_setmethods__["taun"] = _rtklib.geph_t_taun_set
    __swig_getmethods__["taun"] = _rtklib.geph_t_taun_get
    if _newclass:taun = _swig_property(_rtklib.geph_t_taun_get, _rtklib.geph_t_taun_set)
    __swig_setmethods__["gamn"] = _rtklib.geph_t_gamn_set
    __swig_getmethods__["gamn"] = _rtklib.geph_t_gamn_get
    if _newclass:gamn = _swig_property(_rtklib.geph_t_gamn_get, _rtklib.geph_t_gamn_set)
    __swig_setmethods__["dtaun"] = _rtklib.geph_t_dtaun_set
    __swig_getmethods__["dtaun"] = _rtklib.geph_t_dtaun_get
    if _newclass:dtaun = _swig_property(_rtklib.geph_t_dtaun_get, _rtklib.geph_t_dtaun_set)
    def __init__(self): 
        this = _rtklib.new_geph_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_geph_t
    __del__ = lambda self : None;
geph_t_swigregister = _rtklib.geph_t_swigregister
geph_t_swigregister(geph_t)

class dgps_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dgps_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dgps_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["t0"] = _rtklib.dgps_t_t0_set
    __swig_getmethods__["t0"] = _rtklib.dgps_t_t0_get
    if _newclass:t0 = _swig_property(_rtklib.dgps_t_t0_get, _rtklib.dgps_t_t0_set)
    __swig_setmethods__["prc"] = _rtklib.dgps_t_prc_set
    __swig_getmethods__["prc"] = _rtklib.dgps_t_prc_get
    if _newclass:prc = _swig_property(_rtklib.dgps_t_prc_get, _rtklib.dgps_t_prc_set)
    __swig_setmethods__["rrc"] = _rtklib.dgps_t_rrc_set
    __swig_getmethods__["rrc"] = _rtklib.dgps_t_rrc_get
    if _newclass:rrc = _swig_property(_rtklib.dgps_t_rrc_get, _rtklib.dgps_t_rrc_set)
    __swig_setmethods__["iod"] = _rtklib.dgps_t_iod_set
    __swig_getmethods__["iod"] = _rtklib.dgps_t_iod_get
    if _newclass:iod = _swig_property(_rtklib.dgps_t_iod_get, _rtklib.dgps_t_iod_set)
    __swig_setmethods__["udre"] = _rtklib.dgps_t_udre_set
    __swig_getmethods__["udre"] = _rtklib.dgps_t_udre_get
    if _newclass:udre = _swig_property(_rtklib.dgps_t_udre_get, _rtklib.dgps_t_udre_set)
    def __init__(self): 
        this = _rtklib.new_dgps_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_dgps_t
    __del__ = lambda self : None;
dgps_t_swigregister = _rtklib.dgps_t_swigregister
dgps_t_swigregister(dgps_t)

class nav_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nav_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nav_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _rtklib.nav_t_n_set
    __swig_getmethods__["n"] = _rtklib.nav_t_n_get
    if _newclass:n = _swig_property(_rtklib.nav_t_n_get, _rtklib.nav_t_n_set)
    __swig_setmethods__["nmax"] = _rtklib.nav_t_nmax_set
    __swig_getmethods__["nmax"] = _rtklib.nav_t_nmax_get
    if _newclass:nmax = _swig_property(_rtklib.nav_t_nmax_get, _rtklib.nav_t_nmax_set)
    __swig_setmethods__["ng"] = _rtklib.nav_t_ng_set
    __swig_getmethods__["ng"] = _rtklib.nav_t_ng_get
    if _newclass:ng = _swig_property(_rtklib.nav_t_ng_get, _rtklib.nav_t_ng_set)
    __swig_setmethods__["ngmax"] = _rtklib.nav_t_ngmax_set
    __swig_getmethods__["ngmax"] = _rtklib.nav_t_ngmax_get
    if _newclass:ngmax = _swig_property(_rtklib.nav_t_ngmax_get, _rtklib.nav_t_ngmax_set)
    __swig_setmethods__["nf"] = _rtklib.nav_t_nf_set
    __swig_getmethods__["nf"] = _rtklib.nav_t_nf_get
    if _newclass:nf = _swig_property(_rtklib.nav_t_nf_get, _rtklib.nav_t_nf_set)
    __swig_setmethods__["nfmax"] = _rtklib.nav_t_nfmax_set
    __swig_getmethods__["nfmax"] = _rtklib.nav_t_nfmax_get
    if _newclass:nfmax = _swig_property(_rtklib.nav_t_nfmax_get, _rtklib.nav_t_nfmax_set)
    __swig_setmethods__["eph"] = _rtklib.nav_t_eph_set
    __swig_getmethods__["eph"] = _rtklib.nav_t_eph_get
    if _newclass:eph = _swig_property(_rtklib.nav_t_eph_get, _rtklib.nav_t_eph_set)
    __swig_setmethods__["geph"] = _rtklib.nav_t_geph_set
    __swig_getmethods__["geph"] = _rtklib.nav_t_geph_get
    if _newclass:geph = _swig_property(_rtklib.nav_t_geph_get, _rtklib.nav_t_geph_set)
    __swig_setmethods__["alm"] = _rtklib.nav_t_alm_set
    __swig_getmethods__["alm"] = _rtklib.nav_t_alm_get
    if _newclass:alm = _swig_property(_rtklib.nav_t_alm_get, _rtklib.nav_t_alm_set)
    __swig_setmethods__["utc_gps"] = _rtklib.nav_t_utc_gps_set
    __swig_getmethods__["utc_gps"] = _rtklib.nav_t_utc_gps_get
    if _newclass:utc_gps = _swig_property(_rtklib.nav_t_utc_gps_get, _rtklib.nav_t_utc_gps_set)
    __swig_setmethods__["utc_glo"] = _rtklib.nav_t_utc_glo_set
    __swig_getmethods__["utc_glo"] = _rtklib.nav_t_utc_glo_get
    if _newclass:utc_glo = _swig_property(_rtklib.nav_t_utc_glo_get, _rtklib.nav_t_utc_glo_set)
    __swig_setmethods__["utc_cmp"] = _rtklib.nav_t_utc_cmp_set
    __swig_getmethods__["utc_cmp"] = _rtklib.nav_t_utc_cmp_get
    if _newclass:utc_cmp = _swig_property(_rtklib.nav_t_utc_cmp_get, _rtklib.nav_t_utc_cmp_set)
    __swig_setmethods__["ion_gps"] = _rtklib.nav_t_ion_gps_set
    __swig_getmethods__["ion_gps"] = _rtklib.nav_t_ion_gps_get
    if _newclass:ion_gps = _swig_property(_rtklib.nav_t_ion_gps_get, _rtklib.nav_t_ion_gps_set)
    __swig_setmethods__["ion_cmp"] = _rtklib.nav_t_ion_cmp_set
    __swig_getmethods__["ion_cmp"] = _rtklib.nav_t_ion_cmp_get
    if _newclass:ion_cmp = _swig_property(_rtklib.nav_t_ion_cmp_get, _rtklib.nav_t_ion_cmp_set)
    __swig_setmethods__["leaps"] = _rtklib.nav_t_leaps_set
    __swig_getmethods__["leaps"] = _rtklib.nav_t_leaps_get
    if _newclass:leaps = _swig_property(_rtklib.nav_t_leaps_get, _rtklib.nav_t_leaps_set)
    __swig_setmethods__["lam"] = _rtklib.nav_t_lam_set
    __swig_getmethods__["lam"] = _rtklib.nav_t_lam_get
    if _newclass:lam = _swig_property(_rtklib.nav_t_lam_get, _rtklib.nav_t_lam_set)
    __swig_setmethods__["glo_fcn"] = _rtklib.nav_t_glo_fcn_set
    __swig_getmethods__["glo_fcn"] = _rtklib.nav_t_glo_fcn_get
    if _newclass:glo_fcn = _swig_property(_rtklib.nav_t_glo_fcn_get, _rtklib.nav_t_glo_fcn_set)
    def __init__(self): 
        this = _rtklib.new_nav_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_nav_t
    __del__ = lambda self : None;
nav_t_swigregister = _rtklib.nav_t_swigregister
nav_t_swigregister(nav_t)

class sta_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sta_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sta_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _rtklib.sta_t_name_set
    __swig_getmethods__["name"] = _rtklib.sta_t_name_get
    if _newclass:name = _swig_property(_rtklib.sta_t_name_get, _rtklib.sta_t_name_set)
    __swig_setmethods__["marker"] = _rtklib.sta_t_marker_set
    __swig_getmethods__["marker"] = _rtklib.sta_t_marker_get
    if _newclass:marker = _swig_property(_rtklib.sta_t_marker_get, _rtklib.sta_t_marker_set)
    __swig_setmethods__["antdes"] = _rtklib.sta_t_antdes_set
    __swig_getmethods__["antdes"] = _rtklib.sta_t_antdes_get
    if _newclass:antdes = _swig_property(_rtklib.sta_t_antdes_get, _rtklib.sta_t_antdes_set)
    __swig_setmethods__["antsno"] = _rtklib.sta_t_antsno_set
    __swig_getmethods__["antsno"] = _rtklib.sta_t_antsno_get
    if _newclass:antsno = _swig_property(_rtklib.sta_t_antsno_get, _rtklib.sta_t_antsno_set)
    __swig_setmethods__["rectype"] = _rtklib.sta_t_rectype_set
    __swig_getmethods__["rectype"] = _rtklib.sta_t_rectype_get
    if _newclass:rectype = _swig_property(_rtklib.sta_t_rectype_get, _rtklib.sta_t_rectype_set)
    __swig_setmethods__["recver"] = _rtklib.sta_t_recver_set
    __swig_getmethods__["recver"] = _rtklib.sta_t_recver_get
    if _newclass:recver = _swig_property(_rtklib.sta_t_recver_get, _rtklib.sta_t_recver_set)
    __swig_setmethods__["recsno"] = _rtklib.sta_t_recsno_set
    __swig_getmethods__["recsno"] = _rtklib.sta_t_recsno_get
    if _newclass:recsno = _swig_property(_rtklib.sta_t_recsno_get, _rtklib.sta_t_recsno_set)
    __swig_setmethods__["antsetup"] = _rtklib.sta_t_antsetup_set
    __swig_getmethods__["antsetup"] = _rtklib.sta_t_antsetup_get
    if _newclass:antsetup = _swig_property(_rtklib.sta_t_antsetup_get, _rtklib.sta_t_antsetup_set)
    __swig_setmethods__["itrf"] = _rtklib.sta_t_itrf_set
    __swig_getmethods__["itrf"] = _rtklib.sta_t_itrf_get
    if _newclass:itrf = _swig_property(_rtklib.sta_t_itrf_get, _rtklib.sta_t_itrf_set)
    __swig_setmethods__["deltype"] = _rtklib.sta_t_deltype_set
    __swig_getmethods__["deltype"] = _rtklib.sta_t_deltype_get
    if _newclass:deltype = _swig_property(_rtklib.sta_t_deltype_get, _rtklib.sta_t_deltype_set)
    __swig_setmethods__["pos"] = _rtklib.sta_t_pos_set
    __swig_getmethods__["pos"] = _rtklib.sta_t_pos_get
    if _newclass:pos = _swig_property(_rtklib.sta_t_pos_get, _rtklib.sta_t_pos_set)
    __swig_setmethods__["delt"] = _rtklib.sta_t_delt_set
    __swig_getmethods__["delt"] = _rtklib.sta_t_delt_get
    if _newclass:delt = _swig_property(_rtklib.sta_t_delt_get, _rtklib.sta_t_delt_set)
    __swig_setmethods__["hgt"] = _rtklib.sta_t_hgt_set
    __swig_getmethods__["hgt"] = _rtklib.sta_t_hgt_get
    if _newclass:hgt = _swig_property(_rtklib.sta_t_hgt_get, _rtklib.sta_t_hgt_set)
    def __init__(self): 
        this = _rtklib.new_sta_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_sta_t
    __del__ = lambda self : None;
sta_t_swigregister = _rtklib.sta_t_swigregister
sta_t_swigregister(sta_t)

class rtcm_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rtcm_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rtcm_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["staid"] = _rtklib.rtcm_t_staid_set
    __swig_getmethods__["staid"] = _rtklib.rtcm_t_staid_get
    if _newclass:staid = _swig_property(_rtklib.rtcm_t_staid_get, _rtklib.rtcm_t_staid_set)
    __swig_setmethods__["stah"] = _rtklib.rtcm_t_stah_set
    __swig_getmethods__["stah"] = _rtklib.rtcm_t_stah_get
    if _newclass:stah = _swig_property(_rtklib.rtcm_t_stah_get, _rtklib.rtcm_t_stah_set)
    __swig_setmethods__["time"] = _rtklib.rtcm_t_time_set
    __swig_getmethods__["time"] = _rtklib.rtcm_t_time_get
    if _newclass:time = _swig_property(_rtklib.rtcm_t_time_get, _rtklib.rtcm_t_time_set)
    __swig_setmethods__["time_s"] = _rtklib.rtcm_t_time_s_set
    __swig_getmethods__["time_s"] = _rtklib.rtcm_t_time_s_get
    if _newclass:time_s = _swig_property(_rtklib.rtcm_t_time_s_get, _rtklib.rtcm_t_time_s_set)
    __swig_setmethods__["obs"] = _rtklib.rtcm_t_obs_set
    __swig_getmethods__["obs"] = _rtklib.rtcm_t_obs_get
    if _newclass:obs = _swig_property(_rtklib.rtcm_t_obs_get, _rtklib.rtcm_t_obs_set)
    __swig_setmethods__["nav"] = _rtklib.rtcm_t_nav_set
    __swig_getmethods__["nav"] = _rtklib.rtcm_t_nav_get
    if _newclass:nav = _swig_property(_rtklib.rtcm_t_nav_get, _rtklib.rtcm_t_nav_set)
    __swig_setmethods__["sta"] = _rtklib.rtcm_t_sta_set
    __swig_getmethods__["sta"] = _rtklib.rtcm_t_sta_get
    if _newclass:sta = _swig_property(_rtklib.rtcm_t_sta_get, _rtklib.rtcm_t_sta_set)
    __swig_setmethods__["msg"] = _rtklib.rtcm_t_msg_set
    __swig_getmethods__["msg"] = _rtklib.rtcm_t_msg_get
    if _newclass:msg = _swig_property(_rtklib.rtcm_t_msg_get, _rtklib.rtcm_t_msg_set)
    __swig_setmethods__["mtp"] = _rtklib.rtcm_t_mtp_set
    __swig_getmethods__["mtp"] = _rtklib.rtcm_t_mtp_get
    if _newclass:mtp = _swig_property(_rtklib.rtcm_t_mtp_get, _rtklib.rtcm_t_mtp_set)
    __swig_setmethods__["obsflag"] = _rtklib.rtcm_t_obsflag_set
    __swig_getmethods__["obsflag"] = _rtklib.rtcm_t_obsflag_get
    if _newclass:obsflag = _swig_property(_rtklib.rtcm_t_obsflag_get, _rtklib.rtcm_t_obsflag_set)
    __swig_setmethods__["ephsat"] = _rtklib.rtcm_t_ephsat_set
    __swig_getmethods__["ephsat"] = _rtklib.rtcm_t_ephsat_get
    if _newclass:ephsat = _swig_property(_rtklib.rtcm_t_ephsat_get, _rtklib.rtcm_t_ephsat_set)
    __swig_setmethods__["cp"] = _rtklib.rtcm_t_cp_set
    __swig_getmethods__["cp"] = _rtklib.rtcm_t_cp_get
    if _newclass:cp = _swig_property(_rtklib.rtcm_t_cp_get, _rtklib.rtcm_t_cp_set)
    __swig_setmethods__["lock"] = _rtklib.rtcm_t_lock_set
    __swig_getmethods__["lock"] = _rtklib.rtcm_t_lock_get
    if _newclass:lock = _swig_property(_rtklib.rtcm_t_lock_get, _rtklib.rtcm_t_lock_set)
    __swig_setmethods__["loss"] = _rtklib.rtcm_t_loss_set
    __swig_getmethods__["loss"] = _rtklib.rtcm_t_loss_get
    if _newclass:loss = _swig_property(_rtklib.rtcm_t_loss_get, _rtklib.rtcm_t_loss_set)
    __swig_setmethods__["lltime"] = _rtklib.rtcm_t_lltime_set
    __swig_getmethods__["lltime"] = _rtklib.rtcm_t_lltime_get
    if _newclass:lltime = _swig_property(_rtklib.rtcm_t_lltime_get, _rtklib.rtcm_t_lltime_set)
    __swig_setmethods__["nbyte"] = _rtklib.rtcm_t_nbyte_set
    __swig_getmethods__["nbyte"] = _rtklib.rtcm_t_nbyte_get
    if _newclass:nbyte = _swig_property(_rtklib.rtcm_t_nbyte_get, _rtklib.rtcm_t_nbyte_set)
    __swig_setmethods__["nbit"] = _rtklib.rtcm_t_nbit_set
    __swig_getmethods__["nbit"] = _rtklib.rtcm_t_nbit_get
    if _newclass:nbit = _swig_property(_rtklib.rtcm_t_nbit_get, _rtklib.rtcm_t_nbit_set)
    __swig_setmethods__["len"] = _rtklib.rtcm_t_len_set
    __swig_getmethods__["len"] = _rtklib.rtcm_t_len_get
    if _newclass:len = _swig_property(_rtklib.rtcm_t_len_get, _rtklib.rtcm_t_len_set)
    __swig_setmethods__["buff"] = _rtklib.rtcm_t_buff_set
    __swig_getmethods__["buff"] = _rtklib.rtcm_t_buff_get
    if _newclass:buff = _swig_property(_rtklib.rtcm_t_buff_get, _rtklib.rtcm_t_buff_set)
    __swig_setmethods__["satsinfo"] = _rtklib.rtcm_t_satsinfo_set
    __swig_getmethods__["satsinfo"] = _rtklib.rtcm_t_satsinfo_get
    if _newclass:satsinfo = _swig_property(_rtklib.rtcm_t_satsinfo_get, _rtklib.rtcm_t_satsinfo_set)
    def __init__(self): 
        this = _rtklib.new_rtcm_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_rtcm_t
    __del__ = lambda self : None;
rtcm_t_swigregister = _rtklib.rtcm_t_swigregister
rtcm_t_swigregister(rtcm_t)

class opt_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opt_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opt_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _rtklib.opt_t_name_set
    __swig_getmethods__["name"] = _rtklib.opt_t_name_get
    if _newclass:name = _swig_property(_rtklib.opt_t_name_get, _rtklib.opt_t_name_set)
    __swig_setmethods__["format"] = _rtklib.opt_t_format_set
    __swig_getmethods__["format"] = _rtklib.opt_t_format_get
    if _newclass:format = _swig_property(_rtklib.opt_t_format_get, _rtklib.opt_t_format_set)
    __swig_setmethods__["var"] = _rtklib.opt_t_var_set
    __swig_getmethods__["var"] = _rtklib.opt_t_var_get
    if _newclass:var = _swig_property(_rtklib.opt_t_var_get, _rtklib.opt_t_var_set)
    __swig_setmethods__["comment"] = _rtklib.opt_t_comment_set
    __swig_getmethods__["comment"] = _rtklib.opt_t_comment_get
    if _newclass:comment = _swig_property(_rtklib.opt_t_comment_get, _rtklib.opt_t_comment_set)
    def __init__(self): 
        this = _rtklib.new_opt_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_opt_t
    __del__ = lambda self : None;
opt_t_swigregister = _rtklib.opt_t_swigregister
opt_t_swigregister(opt_t)

class snrmask_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, snrmask_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, snrmask_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ena"] = _rtklib.snrmask_t_ena_set
    __swig_getmethods__["ena"] = _rtklib.snrmask_t_ena_get
    if _newclass:ena = _swig_property(_rtklib.snrmask_t_ena_get, _rtklib.snrmask_t_ena_set)
    __swig_setmethods__["mask"] = _rtklib.snrmask_t_mask_set
    __swig_getmethods__["mask"] = _rtklib.snrmask_t_mask_get
    if _newclass:mask = _swig_property(_rtklib.snrmask_t_mask_get, _rtklib.snrmask_t_mask_set)
    def __init__(self): 
        this = _rtklib.new_snrmask_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_snrmask_t
    __del__ = lambda self : None;
snrmask_t_swigregister = _rtklib.snrmask_t_swigregister
snrmask_t_swigregister(snrmask_t)

class ambc_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ambc_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ambc_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["epoch"] = _rtklib.ambc_t_epoch_set
    __swig_getmethods__["epoch"] = _rtklib.ambc_t_epoch_get
    if _newclass:epoch = _swig_property(_rtklib.ambc_t_epoch_get, _rtklib.ambc_t_epoch_set)
    __swig_setmethods__["n"] = _rtklib.ambc_t_n_set
    __swig_getmethods__["n"] = _rtklib.ambc_t_n_get
    if _newclass:n = _swig_property(_rtklib.ambc_t_n_get, _rtklib.ambc_t_n_set)
    __swig_setmethods__["LC"] = _rtklib.ambc_t_LC_set
    __swig_getmethods__["LC"] = _rtklib.ambc_t_LC_get
    if _newclass:LC = _swig_property(_rtklib.ambc_t_LC_get, _rtklib.ambc_t_LC_set)
    __swig_setmethods__["LCv"] = _rtklib.ambc_t_LCv_set
    __swig_getmethods__["LCv"] = _rtklib.ambc_t_LCv_get
    if _newclass:LCv = _swig_property(_rtklib.ambc_t_LCv_get, _rtklib.ambc_t_LCv_set)
    __swig_setmethods__["fixcnt"] = _rtklib.ambc_t_fixcnt_set
    __swig_getmethods__["fixcnt"] = _rtklib.ambc_t_fixcnt_get
    if _newclass:fixcnt = _swig_property(_rtklib.ambc_t_fixcnt_get, _rtklib.ambc_t_fixcnt_set)
    __swig_setmethods__["flags"] = _rtklib.ambc_t_flags_set
    __swig_getmethods__["flags"] = _rtklib.ambc_t_flags_get
    if _newclass:flags = _swig_property(_rtklib.ambc_t_flags_get, _rtklib.ambc_t_flags_set)
    def __init__(self): 
        this = _rtklib.new_ambc_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_ambc_t
    __del__ = lambda self : None;
ambc_t_swigregister = _rtklib.ambc_t_swigregister
ambc_t_swigregister(ambc_t)

class half_cyc_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, half_cyc_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, half_cyc_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sat"] = _rtklib.half_cyc_t_sat_set
    __swig_getmethods__["sat"] = _rtklib.half_cyc_t_sat_get
    if _newclass:sat = _swig_property(_rtklib.half_cyc_t_sat_get, _rtklib.half_cyc_t_sat_set)
    __swig_setmethods__["freq"] = _rtklib.half_cyc_t_freq_set
    __swig_getmethods__["freq"] = _rtklib.half_cyc_t_freq_get
    if _newclass:freq = _swig_property(_rtklib.half_cyc_t_freq_get, _rtklib.half_cyc_t_freq_set)
    __swig_setmethods__["valid"] = _rtklib.half_cyc_t_valid_set
    __swig_getmethods__["valid"] = _rtklib.half_cyc_t_valid_get
    if _newclass:valid = _swig_property(_rtklib.half_cyc_t_valid_get, _rtklib.half_cyc_t_valid_set)
    __swig_setmethods__["corr"] = _rtklib.half_cyc_t_corr_set
    __swig_getmethods__["corr"] = _rtklib.half_cyc_t_corr_get
    if _newclass:corr = _swig_property(_rtklib.half_cyc_t_corr_get, _rtklib.half_cyc_t_corr_set)
    __swig_setmethods__["ts"] = _rtklib.half_cyc_t_ts_set
    __swig_getmethods__["ts"] = _rtklib.half_cyc_t_ts_get
    if _newclass:ts = _swig_property(_rtklib.half_cyc_t_ts_get, _rtklib.half_cyc_t_ts_set)
    __swig_setmethods__["te"] = _rtklib.half_cyc_t_te_set
    __swig_getmethods__["te"] = _rtklib.half_cyc_t_te_get
    if _newclass:te = _swig_property(_rtklib.half_cyc_t_te_get, _rtklib.half_cyc_t_te_set)
    __swig_setmethods__["next"] = _rtklib.half_cyc_t_next_set
    __swig_getmethods__["next"] = _rtklib.half_cyc_t_next_get
    if _newclass:next = _swig_property(_rtklib.half_cyc_t_next_get, _rtklib.half_cyc_t_next_set)
    def __init__(self): 
        this = _rtklib.new_half_cyc_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_half_cyc_t
    __del__ = lambda self : None;
half_cyc_t_swigregister = _rtklib.half_cyc_t_swigregister
half_cyc_t_swigregister(half_cyc_t)

class pvecef_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pvecef_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pvecef_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pvecef"] = _rtklib.pvecef_t_pvecef_set
    __swig_getmethods__["pvecef"] = _rtklib.pvecef_t_pvecef_get
    if _newclass:pvecef = _swig_property(_rtklib.pvecef_t_pvecef_get, _rtklib.pvecef_t_pvecef_set)
    __swig_setmethods__["itow"] = _rtklib.pvecef_t_itow_set
    __swig_getmethods__["itow"] = _rtklib.pvecef_t_itow_get
    if _newclass:itow = _swig_property(_rtklib.pvecef_t_itow_get, _rtklib.pvecef_t_itow_set)
    __swig_setmethods__["est_acc"] = _rtklib.pvecef_t_est_acc_set
    __swig_getmethods__["est_acc"] = _rtklib.pvecef_t_est_acc_get
    if _newclass:est_acc = _swig_property(_rtklib.pvecef_t_est_acc_get, _rtklib.pvecef_t_est_acc_set)
    __swig_setmethods__["get_pv"] = _rtklib.pvecef_t_get_pv_set
    __swig_getmethods__["get_pv"] = _rtklib.pvecef_t_get_pv_get
    if _newclass:get_pv = _swig_property(_rtklib.pvecef_t_get_pv_get, _rtklib.pvecef_t_get_pv_set)
    def __init__(self): 
        this = _rtklib.new_pvecef_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_pvecef_t
    __del__ = lambda self : None;
pvecef_t_swigregister = _rtklib.pvecef_t_swigregister
pvecef_t_swigregister(pvecef_t)

class pvtsol_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pvtsol_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pvtsol_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["itow"] = _rtklib.pvtsol_t_itow_set
    __swig_getmethods__["itow"] = _rtklib.pvtsol_t_itow_get
    if _newclass:itow = _swig_property(_rtklib.pvtsol_t_itow_get, _rtklib.pvtsol_t_itow_set)
    __swig_setmethods__["year"] = _rtklib.pvtsol_t_year_set
    __swig_getmethods__["year"] = _rtklib.pvtsol_t_year_get
    if _newclass:year = _swig_property(_rtklib.pvtsol_t_year_get, _rtklib.pvtsol_t_year_set)
    __swig_setmethods__["month"] = _rtklib.pvtsol_t_month_set
    __swig_getmethods__["month"] = _rtklib.pvtsol_t_month_get
    if _newclass:month = _swig_property(_rtklib.pvtsol_t_month_get, _rtklib.pvtsol_t_month_set)
    __swig_setmethods__["day"] = _rtklib.pvtsol_t_day_set
    __swig_getmethods__["day"] = _rtklib.pvtsol_t_day_get
    if _newclass:day = _swig_property(_rtklib.pvtsol_t_day_get, _rtklib.pvtsol_t_day_set)
    __swig_setmethods__["hour"] = _rtklib.pvtsol_t_hour_set
    __swig_getmethods__["hour"] = _rtklib.pvtsol_t_hour_get
    if _newclass:hour = _swig_property(_rtklib.pvtsol_t_hour_get, _rtklib.pvtsol_t_hour_set)
    __swig_setmethods__["min"] = _rtklib.pvtsol_t_min_set
    __swig_getmethods__["min"] = _rtklib.pvtsol_t_min_get
    if _newclass:min = _swig_property(_rtklib.pvtsol_t_min_get, _rtklib.pvtsol_t_min_set)
    __swig_setmethods__["sec"] = _rtklib.pvtsol_t_sec_set
    __swig_getmethods__["sec"] = _rtklib.pvtsol_t_sec_get
    if _newclass:sec = _swig_property(_rtklib.pvtsol_t_sec_get, _rtklib.pvtsol_t_sec_set)
    __swig_setmethods__["valid"] = _rtklib.pvtsol_t_valid_set
    __swig_getmethods__["valid"] = _rtklib.pvtsol_t_valid_get
    if _newclass:valid = _swig_property(_rtklib.pvtsol_t_valid_get, _rtklib.pvtsol_t_valid_set)
    __swig_setmethods__["t_acc"] = _rtklib.pvtsol_t_t_acc_set
    __swig_getmethods__["t_acc"] = _rtklib.pvtsol_t_t_acc_get
    if _newclass:t_acc = _swig_property(_rtklib.pvtsol_t_t_acc_get, _rtklib.pvtsol_t_t_acc_set)
    __swig_setmethods__["nano"] = _rtklib.pvtsol_t_nano_set
    __swig_getmethods__["nano"] = _rtklib.pvtsol_t_nano_get
    if _newclass:nano = _swig_property(_rtklib.pvtsol_t_nano_get, _rtklib.pvtsol_t_nano_set)
    __swig_setmethods__["fix_type"] = _rtklib.pvtsol_t_fix_type_set
    __swig_getmethods__["fix_type"] = _rtklib.pvtsol_t_fix_type_get
    if _newclass:fix_type = _swig_property(_rtklib.pvtsol_t_fix_type_get, _rtklib.pvtsol_t_fix_type_set)
    __swig_setmethods__["flags"] = _rtklib.pvtsol_t_flags_set
    __swig_getmethods__["flags"] = _rtklib.pvtsol_t_flags_get
    if _newclass:flags = _swig_property(_rtklib.pvtsol_t_flags_get, _rtklib.pvtsol_t_flags_set)
    __swig_setmethods__["flags2"] = _rtklib.pvtsol_t_flags2_set
    __swig_getmethods__["flags2"] = _rtklib.pvtsol_t_flags2_get
    if _newclass:flags2 = _swig_property(_rtklib.pvtsol_t_flags2_get, _rtklib.pvtsol_t_flags2_set)
    __swig_setmethods__["numsv"] = _rtklib.pvtsol_t_numsv_set
    __swig_getmethods__["numsv"] = _rtklib.pvtsol_t_numsv_get
    if _newclass:numsv = _swig_property(_rtklib.pvtsol_t_numsv_get, _rtklib.pvtsol_t_numsv_set)
    __swig_setmethods__["lon"] = _rtklib.pvtsol_t_lon_set
    __swig_getmethods__["lon"] = _rtklib.pvtsol_t_lon_get
    if _newclass:lon = _swig_property(_rtklib.pvtsol_t_lon_get, _rtklib.pvtsol_t_lon_set)
    __swig_setmethods__["lat"] = _rtklib.pvtsol_t_lat_set
    __swig_getmethods__["lat"] = _rtklib.pvtsol_t_lat_get
    if _newclass:lat = _swig_property(_rtklib.pvtsol_t_lat_get, _rtklib.pvtsol_t_lat_set)
    __swig_setmethods__["height"] = _rtklib.pvtsol_t_height_set
    __swig_getmethods__["height"] = _rtklib.pvtsol_t_height_get
    if _newclass:height = _swig_property(_rtklib.pvtsol_t_height_get, _rtklib.pvtsol_t_height_set)
    __swig_setmethods__["hmsl"] = _rtklib.pvtsol_t_hmsl_set
    __swig_getmethods__["hmsl"] = _rtklib.pvtsol_t_hmsl_get
    if _newclass:hmsl = _swig_property(_rtklib.pvtsol_t_hmsl_get, _rtklib.pvtsol_t_hmsl_set)
    __swig_setmethods__["h_acc"] = _rtklib.pvtsol_t_h_acc_set
    __swig_getmethods__["h_acc"] = _rtklib.pvtsol_t_h_acc_get
    if _newclass:h_acc = _swig_property(_rtklib.pvtsol_t_h_acc_get, _rtklib.pvtsol_t_h_acc_set)
    __swig_setmethods__["v_acc"] = _rtklib.pvtsol_t_v_acc_set
    __swig_getmethods__["v_acc"] = _rtklib.pvtsol_t_v_acc_get
    if _newclass:v_acc = _swig_property(_rtklib.pvtsol_t_v_acc_get, _rtklib.pvtsol_t_v_acc_set)
    __swig_setmethods__["vel_n"] = _rtklib.pvtsol_t_vel_n_set
    __swig_getmethods__["vel_n"] = _rtklib.pvtsol_t_vel_n_get
    if _newclass:vel_n = _swig_property(_rtklib.pvtsol_t_vel_n_get, _rtklib.pvtsol_t_vel_n_set)
    __swig_setmethods__["vel_e"] = _rtklib.pvtsol_t_vel_e_set
    __swig_getmethods__["vel_e"] = _rtklib.pvtsol_t_vel_e_get
    if _newclass:vel_e = _swig_property(_rtklib.pvtsol_t_vel_e_get, _rtklib.pvtsol_t_vel_e_set)
    __swig_setmethods__["vel_d"] = _rtklib.pvtsol_t_vel_d_set
    __swig_getmethods__["vel_d"] = _rtklib.pvtsol_t_vel_d_get
    if _newclass:vel_d = _swig_property(_rtklib.pvtsol_t_vel_d_get, _rtklib.pvtsol_t_vel_d_set)
    __swig_setmethods__["g_speed"] = _rtklib.pvtsol_t_g_speed_set
    __swig_getmethods__["g_speed"] = _rtklib.pvtsol_t_g_speed_get
    if _newclass:g_speed = _swig_property(_rtklib.pvtsol_t_g_speed_get, _rtklib.pvtsol_t_g_speed_set)
    __swig_setmethods__["head_mot"] = _rtklib.pvtsol_t_head_mot_set
    __swig_getmethods__["head_mot"] = _rtklib.pvtsol_t_head_mot_get
    if _newclass:head_mot = _swig_property(_rtklib.pvtsol_t_head_mot_get, _rtklib.pvtsol_t_head_mot_set)
    __swig_setmethods__["s_acc"] = _rtklib.pvtsol_t_s_acc_set
    __swig_getmethods__["s_acc"] = _rtklib.pvtsol_t_s_acc_get
    if _newclass:s_acc = _swig_property(_rtklib.pvtsol_t_s_acc_get, _rtklib.pvtsol_t_s_acc_set)
    __swig_setmethods__["head_acc"] = _rtklib.pvtsol_t_head_acc_set
    __swig_getmethods__["head_acc"] = _rtklib.pvtsol_t_head_acc_get
    if _newclass:head_acc = _swig_property(_rtklib.pvtsol_t_head_acc_get, _rtklib.pvtsol_t_head_acc_set)
    __swig_setmethods__["pdop"] = _rtklib.pvtsol_t_pdop_set
    __swig_getmethods__["pdop"] = _rtklib.pvtsol_t_pdop_get
    if _newclass:pdop = _swig_property(_rtklib.pvtsol_t_pdop_get, _rtklib.pvtsol_t_pdop_set)
    __swig_setmethods__["resv"] = _rtklib.pvtsol_t_resv_set
    __swig_getmethods__["resv"] = _rtklib.pvtsol_t_resv_get
    if _newclass:resv = _swig_property(_rtklib.pvtsol_t_resv_get, _rtklib.pvtsol_t_resv_set)
    __swig_setmethods__["head_veh"] = _rtklib.pvtsol_t_head_veh_set
    __swig_getmethods__["head_veh"] = _rtklib.pvtsol_t_head_veh_get
    if _newclass:head_veh = _swig_property(_rtklib.pvtsol_t_head_veh_get, _rtklib.pvtsol_t_head_veh_set)
    __swig_setmethods__["mag_dec"] = _rtklib.pvtsol_t_mag_dec_set
    __swig_getmethods__["mag_dec"] = _rtklib.pvtsol_t_mag_dec_get
    if _newclass:mag_dec = _swig_property(_rtklib.pvtsol_t_mag_dec_get, _rtklib.pvtsol_t_mag_dec_set)
    __swig_setmethods__["mag_acc"] = _rtklib.pvtsol_t_mag_acc_set
    __swig_getmethods__["mag_acc"] = _rtklib.pvtsol_t_mag_acc_get
    if _newclass:mag_acc = _swig_property(_rtklib.pvtsol_t_mag_acc_get, _rtklib.pvtsol_t_mag_acc_set)
    def __init__(self): 
        this = _rtklib.new_pvtsol_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_pvtsol_t
    __del__ = lambda self : None;
pvtsol_t_swigregister = _rtklib.pvtsol_t_swigregister
pvtsol_t_swigregister(pvtsol_t)

class raw_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, raw_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, raw_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _rtklib.raw_t_time_set
    __swig_getmethods__["time"] = _rtklib.raw_t_time_get
    if _newclass:time = _swig_property(_rtklib.raw_t_time_get, _rtklib.raw_t_time_set)
    __swig_setmethods__["obs"] = _rtklib.raw_t_obs_set
    __swig_getmethods__["obs"] = _rtklib.raw_t_obs_get
    if _newclass:obs = _swig_property(_rtklib.raw_t_obs_get, _rtklib.raw_t_obs_set)
    __swig_setmethods__["nav"] = _rtklib.raw_t_nav_set
    __swig_getmethods__["nav"] = _rtklib.raw_t_nav_get
    if _newclass:nav = _swig_property(_rtklib.raw_t_nav_get, _rtklib.raw_t_nav_set)
    __swig_setmethods__["ephsat"] = _rtklib.raw_t_ephsat_set
    __swig_getmethods__["ephsat"] = _rtklib.raw_t_ephsat_get
    if _newclass:ephsat = _swig_property(_rtklib.raw_t_ephsat_get, _rtklib.raw_t_ephsat_set)
    __swig_setmethods__["msgtype"] = _rtklib.raw_t_msgtype_set
    __swig_getmethods__["msgtype"] = _rtklib.raw_t_msgtype_get
    if _newclass:msgtype = _swig_property(_rtklib.raw_t_msgtype_get, _rtklib.raw_t_msgtype_set)
    __swig_setmethods__["subfrm"] = _rtklib.raw_t_subfrm_set
    __swig_getmethods__["subfrm"] = _rtklib.raw_t_subfrm_get
    if _newclass:subfrm = _swig_property(_rtklib.raw_t_subfrm_get, _rtklib.raw_t_subfrm_set)
    __swig_setmethods__["lockt"] = _rtklib.raw_t_lockt_set
    __swig_getmethods__["lockt"] = _rtklib.raw_t_lockt_get
    if _newclass:lockt = _swig_property(_rtklib.raw_t_lockt_get, _rtklib.raw_t_lockt_set)
    __swig_setmethods__["halfc"] = _rtklib.raw_t_halfc_set
    __swig_getmethods__["halfc"] = _rtklib.raw_t_halfc_get
    if _newclass:halfc = _swig_property(_rtklib.raw_t_halfc_get, _rtklib.raw_t_halfc_set)
    __swig_setmethods__["nbyte"] = _rtklib.raw_t_nbyte_set
    __swig_getmethods__["nbyte"] = _rtklib.raw_t_nbyte_get
    if _newclass:nbyte = _swig_property(_rtklib.raw_t_nbyte_get, _rtklib.raw_t_nbyte_set)
    __swig_setmethods__["len"] = _rtklib.raw_t_len_set
    __swig_getmethods__["len"] = _rtklib.raw_t_len_get
    if _newclass:len = _swig_property(_rtklib.raw_t_len_get, _rtklib.raw_t_len_set)
    __swig_setmethods__["iod"] = _rtklib.raw_t_iod_set
    __swig_getmethods__["iod"] = _rtklib.raw_t_iod_get
    if _newclass:iod = _swig_property(_rtklib.raw_t_iod_get, _rtklib.raw_t_iod_set)
    __swig_setmethods__["tod"] = _rtklib.raw_t_tod_set
    __swig_getmethods__["tod"] = _rtklib.raw_t_tod_get
    if _newclass:tod = _swig_property(_rtklib.raw_t_tod_get, _rtklib.raw_t_tod_set)
    __swig_setmethods__["tbase"] = _rtklib.raw_t_tbase_set
    __swig_getmethods__["tbase"] = _rtklib.raw_t_tbase_get
    if _newclass:tbase = _swig_property(_rtklib.raw_t_tbase_get, _rtklib.raw_t_tbase_set)
    __swig_setmethods__["flag"] = _rtklib.raw_t_flag_set
    __swig_getmethods__["flag"] = _rtklib.raw_t_flag_get
    if _newclass:flag = _swig_property(_rtklib.raw_t_flag_get, _rtklib.raw_t_flag_set)
    __swig_setmethods__["outtype"] = _rtklib.raw_t_outtype_set
    __swig_getmethods__["outtype"] = _rtklib.raw_t_outtype_get
    if _newclass:outtype = _swig_property(_rtklib.raw_t_outtype_get, _rtklib.raw_t_outtype_set)
    __swig_setmethods__["leaps"] = _rtklib.raw_t_leaps_set
    __swig_getmethods__["leaps"] = _rtklib.raw_t_leaps_get
    if _newclass:leaps = _swig_property(_rtklib.raw_t_leaps_get, _rtklib.raw_t_leaps_set)
    __swig_setmethods__["buff"] = _rtklib.raw_t_buff_set
    __swig_getmethods__["buff"] = _rtklib.raw_t_buff_get
    if _newclass:buff = _swig_property(_rtklib.raw_t_buff_get, _rtklib.raw_t_buff_set)
    __swig_setmethods__["half_cyc"] = _rtklib.raw_t_half_cyc_set
    __swig_getmethods__["half_cyc"] = _rtklib.raw_t_half_cyc_get
    if _newclass:half_cyc = _swig_property(_rtklib.raw_t_half_cyc_get, _rtklib.raw_t_half_cyc_set)
    __swig_setmethods__["pos"] = _rtklib.raw_t_pos_set
    __swig_getmethods__["pos"] = _rtklib.raw_t_pos_get
    if _newclass:pos = _swig_property(_rtklib.raw_t_pos_get, _rtklib.raw_t_pos_set)
    __swig_setmethods__["vel"] = _rtklib.raw_t_vel_set
    __swig_getmethods__["vel"] = _rtklib.raw_t_vel_get
    if _newclass:vel = _swig_property(_rtklib.raw_t_vel_get, _rtklib.raw_t_vel_set)
    def __init__(self): 
        this = _rtklib.new_raw_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_raw_t
    __del__ = lambda self : None;
raw_t_swigregister = _rtklib.raw_t_swigregister
raw_t_swigregister(raw_t)


def satno(*args):
  return _rtklib.satno(*args)
satno = _rtklib.satno

def satsys(*args):
  return _rtklib.satsys(*args)
satsys = _rtklib.satsys

def satid2no(*args):
  return _rtklib.satid2no(*args)
satid2no = _rtklib.satid2no

def satno2id(*args):
  return _rtklib.satno2id(*args)
satno2id = _rtklib.satno2id

def obs2code(*args):
  return _rtklib.obs2code(*args)
obs2code = _rtklib.obs2code

def code2obs(*args):
  return _rtklib.code2obs(*args)
code2obs = _rtklib.code2obs

def testsnr(*args):
  return _rtklib.testsnr(*args)
testsnr = _rtklib.testsnr

def setcodepri(*args):
  return _rtklib.setcodepri(*args)
setcodepri = _rtklib.setcodepri

def getcodepri(*args):
  return _rtklib.getcodepri(*args)
getcodepri = _rtklib.getcodepri

def str2num(*args):
  return _rtklib.str2num(*args)
str2num = _rtklib.str2num

def str2time(*args):
  return _rtklib.str2time(*args)
str2time = _rtklib.str2time

def time2str(*args):
  return _rtklib.time2str(*args)
time2str = _rtklib.time2str

def epoch2time(*args):
  return _rtklib.epoch2time(*args)
epoch2time = _rtklib.epoch2time

def time2epoch(*args):
  return _rtklib.time2epoch(*args)
time2epoch = _rtklib.time2epoch

def gpst2time(*args):
  return _rtklib.gpst2time(*args)
gpst2time = _rtklib.gpst2time

def time2gpst(*args):
  return _rtklib.time2gpst(*args)
time2gpst = _rtklib.time2gpst

def gst2time(*args):
  return _rtklib.gst2time(*args)
gst2time = _rtklib.gst2time

def time2gst(*args):
  return _rtklib.time2gst(*args)
time2gst = _rtklib.time2gst

def bdt2time(*args):
  return _rtklib.bdt2time(*args)
bdt2time = _rtklib.bdt2time

def time2bdt(*args):
  return _rtklib.time2bdt(*args)
time2bdt = _rtklib.time2bdt

def time_str(*args):
  return _rtklib.time_str(*args)
time_str = _rtklib.time_str

def timeadd(*args):
  return _rtklib.timeadd(*args)
timeadd = _rtklib.timeadd

def timediff(*args):
  return _rtklib.timediff(*args)
timediff = _rtklib.timediff

def gpst2utc(*args):
  return _rtklib.gpst2utc(*args)
gpst2utc = _rtklib.gpst2utc

def utc2gpst(*args):
  return _rtklib.utc2gpst(*args)
utc2gpst = _rtklib.utc2gpst

def gpst2bdt(*args):
  return _rtklib.gpst2bdt(*args)
gpst2bdt = _rtklib.gpst2bdt

def bdt2gpst(*args):
  return _rtklib.bdt2gpst(*args)
bdt2gpst = _rtklib.bdt2gpst

def timeget():
  return _rtklib.timeget()
timeget = _rtklib.timeget

def timeset(*args):
  return _rtklib.timeset(*args)
timeset = _rtklib.timeset

def time2doy(*args):
  return _rtklib.time2doy(*args)
time2doy = _rtklib.time2doy

def utc2gmst(*args):
  return _rtklib.utc2gmst(*args)
utc2gmst = _rtklib.utc2gmst

def read_leaps(*args):
  return _rtklib.read_leaps(*args)
read_leaps = _rtklib.read_leaps

def adjgpsweek(*args):
  return _rtklib.adjgpsweek(*args)
adjgpsweek = _rtklib.adjgpsweek

def tickget():
  return _rtklib.tickget()
tickget = _rtklib.tickget

def input_ubx(*args):
  return _rtklib.input_ubx(*args)
input_ubx = _rtklib.input_ubx

def input_ubxf(*args):
  return _rtklib.input_ubxf(*args)
input_ubxf = _rtklib.input_ubxf

def decode_frame(*args):
  return _rtklib.decode_frame(*args)
decode_frame = _rtklib.decode_frame

def test_glostr(*args):
  return _rtklib.test_glostr(*args)
test_glostr = _rtklib.test_glostr

def decode_glostr(*args):
  return _rtklib.decode_glostr(*args)
decode_glostr = _rtklib.decode_glostr

def decode_gal_inav(*args):
  return _rtklib.decode_gal_inav(*args)
decode_gal_inav = _rtklib.decode_gal_inav

def decode_bds_d1(*args):
  return _rtklib.decode_bds_d1(*args)
decode_bds_d1 = _rtklib.decode_bds_d1

def decode_bds_d2(*args):
  return _rtklib.decode_bds_d2(*args)
decode_bds_d2 = _rtklib.decode_bds_d2

def free_raw(*args):
  return _rtklib.free_raw(*args)
free_raw = _rtklib.free_raw

def satwavelen(*args):
  return _rtklib.satwavelen(*args)
satwavelen = _rtklib.satwavelen

def getbitu(*args):
  return _rtklib.getbitu(*args)
getbitu = _rtklib.getbitu

def getbits(*args):
  return _rtklib.getbits(*args)
getbits = _rtklib.getbits

def setbitu(*args):
  return _rtklib.setbitu(*args)
setbitu = _rtklib.setbitu

def setbits(*args):
  return _rtklib.setbits(*args)
setbits = _rtklib.setbits

def rtk_crc32(*args):
  return _rtklib.rtk_crc32(*args)
rtk_crc32 = _rtklib.rtk_crc32

def rtk_crc24q(*args):
  return _rtklib.rtk_crc24q(*args)
rtk_crc24q = _rtklib.rtk_crc24q

def rtk_crc16(*args):
  return _rtklib.rtk_crc16(*args)
rtk_crc16 = _rtklib.rtk_crc16

def init_raw(*args):
  return _rtklib.init_raw(*args)
init_raw = _rtklib.init_raw

def init_rtcm(*args):
  return _rtklib.init_rtcm(*args)
init_rtcm = _rtklib.init_rtcm

def clear_rtcm(*args):
  return _rtklib.clear_rtcm(*args)
clear_rtcm = _rtklib.clear_rtcm

def free_rtcm(*args):
  return _rtklib.free_rtcm(*args)
free_rtcm = _rtklib.free_rtcm

def input_rtcm3(*args):
  return _rtklib.input_rtcm3(*args)
input_rtcm3 = _rtklib.input_rtcm3

def input_rtcm3f(*args):
  return _rtklib.input_rtcm3f(*args)
input_rtcm3f = _rtklib.input_rtcm3f
class dArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rtklib.new_dArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_dArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _rtklib.dArray___getitem__(self, *args)
    def __setitem__(self, *args): return _rtklib.dArray___setitem__(self, *args)
    def cast(self): return _rtklib.dArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _rtklib.dArray_frompointer
    if _newclass:frompointer = staticmethod(_rtklib.dArray_frompointer)
dArray_swigregister = _rtklib.dArray_swigregister
dArray_swigregister(dArray)
chisqr = cvar.chisqr
lam_carr = cvar.lam_carr

def dArray_frompointer(*args):
  return _rtklib.dArray_frompointer(*args)
dArray_frompointer = _rtklib.dArray_frompointer

class fArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rtklib.new_fArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_fArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _rtklib.fArray___getitem__(self, *args)
    def __setitem__(self, *args): return _rtklib.fArray___setitem__(self, *args)
    def cast(self): return _rtklib.fArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _rtklib.fArray_frompointer
    if _newclass:frompointer = staticmethod(_rtklib.fArray_frompointer)
fArray_swigregister = _rtklib.fArray_swigregister
fArray_swigregister(fArray)

def fArray_frompointer(*args):
  return _rtklib.fArray_frompointer(*args)
fArray_frompointer = _rtklib.fArray_frompointer

class iArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rtklib.new_iArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_iArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _rtklib.iArray___getitem__(self, *args)
    def __setitem__(self, *args): return _rtklib.iArray___setitem__(self, *args)
    def cast(self): return _rtklib.iArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _rtklib.iArray_frompointer
    if _newclass:frompointer = staticmethod(_rtklib.iArray_frompointer)
iArray_swigregister = _rtklib.iArray_swigregister
iArray_swigregister(iArray)

def iArray_frompointer(*args):
  return _rtklib.iArray_frompointer(*args)
iArray_frompointer = _rtklib.iArray_frompointer

class cArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rtklib.new_cArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_cArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _rtklib.cArray___getitem__(self, *args)
    def __setitem__(self, *args): return _rtklib.cArray___setitem__(self, *args)
    def cast(self): return _rtklib.cArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _rtklib.cArray_frompointer
    if _newclass:frompointer = staticmethod(_rtklib.cArray_frompointer)
cArray_swigregister = _rtklib.cArray_swigregister
cArray_swigregister(cArray)

def cArray_frompointer(*args):
  return _rtklib.cArray_frompointer(*args)
cArray_frompointer = _rtklib.cArray_frompointer

class ucArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ucArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ucArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _rtklib.new_ucArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rtklib.delete_ucArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _rtklib.ucArray___getitem__(self, *args)
    def __setitem__(self, *args): return _rtklib.ucArray___setitem__(self, *args)
    def cast(self): return _rtklib.ucArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _rtklib.ucArray_frompointer
    if _newclass:frompointer = staticmethod(_rtklib.ucArray_frompointer)
ucArray_swigregister = _rtklib.ucArray_swigregister
ucArray_swigregister(ucArray)

def ucArray_frompointer(*args):
  return _rtklib.ucArray_frompointer(*args)
ucArray_frompointer = _rtklib.ucArray_frompointer


def new_intp():
  return _rtklib.new_intp()
new_intp = _rtklib.new_intp

def copy_intp(*args):
  return _rtklib.copy_intp(*args)
copy_intp = _rtklib.copy_intp

def delete_intp(*args):
  return _rtklib.delete_intp(*args)
delete_intp = _rtklib.delete_intp

def intp_assign(*args):
  return _rtklib.intp_assign(*args)
intp_assign = _rtklib.intp_assign

def intp_value(*args):
  return _rtklib.intp_value(*args)
intp_value = _rtklib.intp_value

def getEph(*args):
  return _rtklib.getEph(*args)
getEph = _rtklib.getEph

def getGeph(*args):
  return _rtklib.getGeph(*args)
getGeph = _rtklib.getGeph

def getObs(*args):
  return _rtklib.getObs(*args)
getObs = _rtklib.getObs

def getD(*args):
  return _rtklib.getD(*args)
getD = _rtklib.getD

def getF(*args):
  return _rtklib.getF(*args)
getF = _rtklib.getF

def getI(*args):
  return _rtklib.getI(*args)
getI = _rtklib.getI

def getUc(*args):
  return _rtklib.getUc(*args)
getUc = _rtklib.getUc
# This file is compatible with both classic and new-style classes.


